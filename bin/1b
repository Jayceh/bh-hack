#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use FindBin;
use Test::More;

use lib "$FindBin::Bin/../lib";

ok 1;

# Set up a default file and path.
our $FILE = 'round-1-problem-B-small.in';
my $PATH  = @ARGV ? shift : "$FindBin::Bin/../data/$FILE";
our $NEXT_SINK = 'a';

open my $infh, '<', $PATH || die $!;


chomp( my $num_maps = <$infh> ); # Number of maps, eg 100.


# Parse input into a structure as:
# [
#   {
#     height   => h,
#     width    => w,
#     map      => [
#                   [ { elevation => a, basin => b }, { elevation => a, basin => b }, { elevation => a, basin => b } ],
#                   [ ... ],
#                   [ ... ],
#                 ]
#   },
#   { ... },
# ]

my @map;
for my $map_num ( 1 .. $num_maps ) {
    chomp( my $hw = <$infh> );
    my( $height, $width ) = split /\s+/, $hw;

    push @map, {
        height  => $height,
        width   => $width,
        map     => [ map { my $line = <$infh>; chomp $line; [ map {{elevation => $_ }} split /\s+/, $line ] } 1 .. $height ]                                                         
    };
    last;
}

sub find_sink {
  my( $y, $x ) = 










is( scalar(@map), $num_maps, "Correct number of maps: $num_maps." );

done_testing();
